#lang racket

(define (isvar e)
  (eq? (car e) 'VAR))
(define (name e)
  (cadr e))
(define (isconst e)
  (eq? (car e) 'QUOTE))
(define (number e)
  (cadr e))
(define (isnull S)
  (eq? (car S) 'SKIP))
(define (isassignment S)
  (eq? (car S) 'ASSIGN))
(define (lhs S)
  (cadr S))
(define (rhs S)
  (caddr S))
(define (assoc x n v)
  (if (eq? (caar n) x)
      (car v)
      (assoc x (cdr n) (cdr v))))
(define (update n v x y)
  (if (eq? (caar n) x)
      (cons y (cdr v))
      (cons (car v) (update (cdr n) (cdr v) x y))))
(define (issum e)
  (eq? (car e) '+))
(define (operand1 e)
  (cadr e))
(define (operand2 e)
  (caddr e))
(define (simplevalue e)
  (cond
    ((isconst e) (number e))
    ((issum e) (+ (simplevalue (operand1 e)) (simplevalue (operand2 e))))
    (else 'ERROR)))
(define (iseq e)
  (eq? (car e) 'eq))
(define (val e n v)
  (cond
    ((isvar e) (assoc (name e) n v))
    ((isconst e) (number e))
    ((issum e) (+ (val (operand1 e) n v) (val (operand2 e) n v)))
    ((iseq e) (eq? (val (operand1 e) n v) (val (operand2 e) n v)))
    (else 'ERROR)))
(define (first lst)
  (car lst))
(define (second lst)
  (cadr lst))
(define (issequence S)
  (eq? (car S) 'SEQUENCE))
(define (isconditional S)
  (eq? (car S) 'IF))
(define (iftest S)
  (cadr S))
(define (then S)
  (cadr S))
(define (else S)
  (caddr S))
(define (isloop S)
  (eq? (car S) 'LOOP))
(define (wtest S)
  (cadr S))
(define (wbody S)
  (caddr S))
(define (effect S n v)
  (cond
    ((isnull S) v)
    ((isassignment S) (update n v (lhs S) (val (rhs S) n v)))
    ((issequence S) (effect (second S) n (effect (first S) n v)))
    ((isconditional S) (effect (if (val (iftest S) n v) (then S) (else S)) n v))
    ((isloop S)
     (define (w v)
       (if (val (wtest S) n v)
           (w (effect (wbody S) n v))
           v))
     (w v))
    (else 'ERROR)))
(define (fourlist a b c d)
  (list a b c d))
(define (q x)
  (if (> x 100)
      x
      (q (* 2 x))))
(define (w y x q r)
  (if (>= r x)
      (w y x (+ q 1) (- r x))
      (fourlist y x q r)))
(define (fact n)
  (f n 1))
(define (f n m)
  (if (= n 0)
      m
      (f (- n 1) (* m n))))