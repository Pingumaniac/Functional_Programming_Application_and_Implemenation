#lang racket

; Converted into Racket
(define (atom? x)
  (not (pair? x)))
(define (assoc v a)
  (if (null? a)
      'UNDEFINED
      (if (eq? v (caar a))
          (cadar a)
          (assoc v (cdr a)))))
(define (mass d) (car d))
(define (length d) (cadr d))
(define (time d) (caddr d))
(define (same d1 d2)
  (if (eq? d1 'UNDEFINED)
      #f
      (if (eq? d2 'UNDEFINED)
          #f
          (if (eq? (mass d1) (mass d2))
              (if (eq? (length d1) (length d2))
                  (eq? (time d1) (time d2))
                  #f)
              #f))))
(define (threelist x y z)
  (list x y z))
(define (product d1 d2)
  (if (eq? d1 'UNDEFINED)
      'UNDEFINED
      (if (eq? d2 'UNDEFINED)
          'UNDEFINED
          (threelist (+ (mass d1) (mass d2))
                     (+ (length d1) (length d2))
                     (+ (time d1) (time d2))))))
(define (ratio d1 d2)
  (if (eq? d1 'UNDEFINED)
      'UNDEFINED
      (if (eq? d2 'UNDEFINED)
          'UNDEFINED
          (threelist (- (mass d1) (mass d2))
                     (- (length d1) (length d2))
                     (- (time d1) (time d2))))))
(define (dim e a)
  (if (atom? e)
      (assoc e a)
      (let ((d1 (dim (cadr e) a))
            (d2 (dim (caddr e) a)))
        (cond ((eq? (car e) 'ADD)
               (if (same d1 d2)
                   d1
                   'UNDEFINED))
              ((eq? (car e) 'SUB)
               (if (same d1 d2)
                   d1
                   'UNDEFINED))
              ((eq? (car e) 'MUL)
               (if (product d1 d2)
                   (product d1 d2)
                   (if (ratio d1 d2)
                       (ratio d1 d2)
                       'UNDEFINED)))
              (else
               'UNDEFINED)))))
(define (reduce d)
  (if (eq? d 'UNDEFINED)
      'UNDEFINED
      (red d)))
(define (twolist t b)
  (list t b))
(define (num d)
  (car d))
(define (dem d)
  (cadr d))
(define (red d)
  (if (null? (car d))
      '()
      (let ((dl (red (twolist (cdr (num d)) (dem d)))))
        (if (member (car (num d)) (dem dl))
            (twolist (num dl) (remove (car (num d)) (dem dl)))
            (twolist (cons (car (num d)) (num dl)) (dem dl))))))
(define (remove x lst)
  (cond ((null? lst) '())
        ((eq? x (car lst)) (remove x (cdr lst)))
        (else (cons (car lst) (remove x (cdr lst))))))
(define s_tetra '(A B C D))
(define (suc s)
  (list (list (caddr s) (car s) (cadr s) (cadddr s))
        (list (cadddr s) (caddr s) (cadr s) (car s))
        (list (car s) (caddr s) (cadr s) (cadddr s))))
(define (p s)
  (equal? s '(C A D B)))
(define (dfs_find s)
  (dfs_findlist (cons s '())))
(define (dfs_findlist S)
  (if (null? S)
      'NONE
      (if (p (car S))
          (car S)
          (dfs_findlist (append (suc (car S)) (cdr S))))))
(define (fourlist w x y z)
  (list w x y z))
(define (ap op s)
  (let* ((orientation (car s))
         (transform (cadr s))
         (a (car orientation))
         (b (cadr orientation))
         (c (caddr orientation))
         (d (cadddr orientation)))
    (cond ((eq? op 'R) (twolist (fourlist c a b d) (cons op transform)))
          ((eq? op 'F) (twolist (fourlist d c b a) (cons op transform)))
          (else (twolist (fourlist a c b d) (cons op transform))))))
(define (search x y maxdepth)
  (dfs_find (twolist x '()) maxdepth))
(define (set s)
  (if (atom? s)
      (cons s '())
      (union (set (car s)) (set (cdr s)))))
(define (member a x)
  (if (null? x)
      #f
      (if (eq? a (car x))
          #t
          (member a (cdr x)))))
(define (union x y)
  (if (null? x)
      y
      (let ((z (union (cdr x) y)))
        (if (member (car x) z)
            z
            (cons (car x) z)))))
(define (difference x y)
  (if (null? x)
      '()
      (let ((z (difference (cdr x) y)))
        (if (member (car x) z)
            z
            (cons (car x) z)))))
(define (sing s a b)
  (if (atom? s)
      (if (member s a)
          (cons a b)
          (if (member s b)
              (cons (cons s a) (remove s b))
              (cons a (cons s b))))
      (let ((p (sing (car s) a b)))
        (sing (cdr s) (car p) (cdr p)))))
(define (singletons s)
  (cdr (sing s '() '())))
