#lang racket

; Converted into Racket
(define (sumints n)
  (sum (integersbetween 1 n)))
(define (integersbetween m n)
  (if (> m n)
      '()
      (cons m (delay (integersbetween (+ m 1) n)))))
(define (sum x)
  (if (null? x)
      0
      (+ (car x) (sum (force (cdr x))))))
(define (adjust a b)
  (if (< (force a) 0)
      (force a)
      (+ (force a) (force b))))
(define (first k x)
  (if (= k 0)
      '()
      (cons (car x) (first (- k 1) (force (cdr x))))))
(define (firstsum k)
  (first k (sums 0 (integersfrom 1))))
(define (sums a x)
  (cons (+ a (car x)) (delay (sums (+ a (car x)) (force (cdr x))))))
(define (integersfrom m)
  (cons m (lambda () (integersfrom (+ m 1)))))
(define (badif a b c)
  (if a
      b
      c))
(define (f a b)
  (if (> a 0)
      a
      (+ (force b) (force b))))
(define (append x y)
  (if (null? x)
      y
      (cons (car x) (delay (append (force (cdr x)) y)))))
(define triangle
  (letrec ((triangle-helper (lambda (n)
                              (append (integersbetween 1 n) (triangle-helper (+ n 1))))))
    (triangle-helper 1)))
(define (atom? x)
  (not (pair? x)))
(define (flatten t)
  (if (atom? t)
      (cons t '())
      (append (flatten (car t)) (flatten (cdr t)))))
(define (eqlis x y)
  (if (eq? x '())
      (eq? y '())
      (if (eq? y '())
          #f
          (if (eq? (car x) (car y))
              (eqlis (cdr x) (cdr y))
              #f))))
(define (samefringe t1 t2)
  (eqlis (flatten t1) (flatten t2)))
(define (add1 x)
  (cons (+ (car x) 1) (add1 (cdr x))))
(define integers
  (letrec ((integers-helper (lambda (lst)
                              (cons 1 (add1 lst)))))
    (integers-helper integers)))
(define (addlist x y)
  (if (null? x)
      '()
      (cons (+ (car x) (car y)) (addlist (cdr x) (cdr y)))))
(define (merge x y)
  (if (eq? (car x) (car y))
      (merge (cdr x) y)
      (if (< (car x) (car y))
          (cons (car x) (merge (cdr x) y))
          (cons (car y) (merge x (cdr y))))))
(define (mul2 x)
  (cons (* (car x) 2) (mul2 (cdr x))))
(define (mul3 x)
  (cons (* (car x) 3) (mul3 (cdr x))))
(define (mul5 x)
  (cons (* (car x) 5) (mul5 (cdr x))))
(define x
  (letrec ((x-helper (lambda (lst)
                       (cons 1 (merge (merge (mul2 lst) (mul3 lst)) (mul5 lst))))))
    (x-helper x)))
(define (filter p y)
  (if (= (remainder (car y) p) 0)
      (filter p (cdr y))
      (cons (car y) (filter p (cdr y)))))
(define primes
  (letrec ((intsf2 (cdr integers))
           (intsf3 (cdr intsf2))
           (sieve (lambda (x)
                    (cons (car x) (sieve (filter (car x) (cdr x)))))))
    (sieve intsf3)))
