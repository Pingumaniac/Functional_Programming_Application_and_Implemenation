#lang racket

(define (atom? x)
  (not (pair? x)))
(define (member x l)
  (if (null? l)
      #f
      (if (eq? x (car l))
          #t
          (member x (cdr l)))))
(define (locate x l m)
  (if (eq? x (car l))
      (car m)
      (locate x (cdr l) (cdr m))))
(define (assoc x n v)
  (if (member x (car n))
      (locate x (car n) (car v))
      (assoc x (cdr n) (cdr v))))
(define (evlis l n v)
  (if (null? l)
      '()
      (cons (eval (car l) n v)
            (evlis (cdr l) n v))))
(define (vars d)
  (if (null? d)
      '()
      (cons (caar d)
            (vars (cdr d)))))
(define (exprs d)
  (if (null? d)
      '()
      (cons (cdar d)
            (exprs (cdr d)))))
(define (rplaca lst new-car)
  (cons new-car (cdr lst)))

; ex 4.4
(define (cond->if clauses)
  (if (null? clauses)
      'undefined
      `(IF ,(caar clauses) ,(cadar clauses) ,(cond->if (cdr clauses)))))

(define (eval e n v)
  (cond
    ((atom? e) (assoc e n v))
    ((eq? (car e) 'QUOTE) (cadr e))
    ((eq? (car e) 'CAR) (car (eval (cadr e) n v)))
    ((eq? (car e) 'CDR) (cdr (eval (cadr e) n v)))
    ((eq? (car e) 'ATOM) (atom? (eval (cadr e) n v)))
    ((eq? (car e) 'CONS) (cons (eval (cadr e) n v) (eval (caddr e) n v)))
    ((eq? (car e) 'EQ) (eq? (eval (cadr e) n v) (eval (caddr e) n v)))
    ((eq? (car e) 'IF) (eval (if (eval (cadr e) n v) (caddr e) (cadddr e)) n v))
    ((eq? (car e) 'COND) (eval (cond->if (cdr e)) n v)) ; ex 4.4
    ((eq? (car e) 'LAMBDA) (cons (cons (cadr e) (caddr e)) (cons n v)))
    ((eq? (car e) 'LET)
     (let ((y (vars (cddr e)))
           (z (evlis (exprs (cddr e)) n v)))
       (eval (cadr e) (cons y n) (cons z v))))
    ((eq? (car e) 'LETREC)
     (let ((y (vars (cddr e)))
           (vl (cons 'PENDING v)))
       (eval (cadr e) (cons y n) (rplaca v' (evlis (exprs (cddr e)) (cons y n) vl)))))
    (else
     (let ((c (eval (car e) n v))
           (z (evlis (cdr e) n v)))
       (eval (cdar c) (cons (caar c) (cadr c)) (cons z (cddr c)))))))
(define (apply f x)
  (let ((c (eval f '() '())))
    (eval (cdar c) (cons (caar c) (cadr c)) (cons x (cddr c)))))